{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","users","json","user","x","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAEaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+DHG,G,wDAjEb,aAAe,IAAD,8BACZ,gBAuBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAtBnC,EAAKC,MAAQ,CACXb,SAAU,GAGVU,YAAa,IAPL,E,gEAYO,IAAD,QAIb,uCAAG,8BAAAI,EAAA,sEACcC,MAAM,6CADpB,cACAC,EADA,gBAEaA,EAAMC,OAFnB,OAEAC,EAFA,OAGN,EAAKT,SAAS,CAACT,SAAUkB,IAHnB,2CAAH,qDAKLC,K,+BAOQ,IAAD,EACyBC,KAAKP,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXW,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBACpG,OACE,sBAAK/B,UAAU,MAAf,UACA,yCACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAvCRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e3466d2.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n    <div className=\"card-list\"> \n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/> \n        ))}\n    </div>\n)","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className='search'\n        type=\"search\" \n        placeholder={placeholder} \n        onChange={handleChange}\n        \n    />\n)\n\n","\nimport React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super() \n\n      this.state = {\n        monsters: [\n    \n        ],\n        searchField: ''\n       }\n       \n  } \n  \n  componentDidMount() {\n    // fetch('http://jsonplaceholder.typicode.com/users')\n    // .then(response => response.json())\n    // .then(users => this.setState({monsters: users}))\n    let x = async () => {\n      const users = await fetch('http://jsonplaceholder.typicode.com/users')\n      const user = await users.json()\n      this.setState({monsters: user})\n    }\n    x()\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n \n  render() {\n    const {monsters, searchField} = this.state \n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n      <h1>Rolodex</h1>\n      <SearchBox\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           whats up utubedd\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}